deps = [
    'umd-stdlib/core/common'
    '../views/hello/templates/display'
    '../views/hello/templates/list'
    '../views/hello/templates/list-item'
    'umd-stdlib/core/FormGenerator'
    'umd-stdlib/helpers/validators'
]

factory = (require, com, displayTemplate, listTemplate, listItemTemplate, FormGenerator, validators)->
    Backbone = com.Backbone
    $ = com.$
    application = com.application

    do ->
        json = [
            {
                firstname: 'John'
                lastname: 'Doe'
                occupation: 'Memory seeker'
                country: 'United States'
            }
            {
                firstname: 'Ekessi'
                lastname: 'Njonguele'
                occupation: 'Bongo'
                country: 'Cameroon'
            }
            {
                firstname: 'Nanashi'
                lastname: 'Aoba'
                occupation: 'Ronin'
                country: 'Japan'
            }
            {
                firstname: 'Sherlock'
                lastname: 'Holmes'
                occupation: 'Detective'
                country: 'England'
            }
        ]

        index = 0
        for data, index in json
            data.id = ++index

        collection = new com.gen.models.Collection json,
            indexes: uk_name: ['lastname', 'firstname']

        $.mockjax
            url: '/rest/hello/person/list'
            responseTime: 100,
            response: (settings)->
                @responseText = collection.toJSON()
                return

        methods =
            'GET': (settings)->
                model = collection.get settings.urlParams.id
                model.toJSON() if model
            'POST': (settings)->
                data = JSON.parse settings.data
                data.id = ++index
                model = collection.add data
                model.toJSON() if model
            'PUT': (settings)->
                data = JSON.parse settings.data
                model = collection.get data.id
                if model
                    model.set data
                    model.toJSON()
            'DELETE': (settings)->
                model = collection.get settings.urlParams.id
                collection.remove(model) if model

        $.mockjax
            url: /\/rest\/hello\/person\/edit(?:\/([\d]+))?$/
            contentType: 'application/json',
            urlParams: ['id'],
            responseTime: 100,
            response: (settings)->
                if settings.type
                    method = methods[settings.type.toUpperCase()]
                method or (method = methods.GET)

                @responseText = method settings
                return

        return

    class HelloController extends com.gen.controllers.ListController
        displayAction: ->
            # main model
            model = new Backbone.Model
                firstname: 'John'
                lastname: 'Doe'
                occupation: 'Memory seeker'
                country: 'Zero'

            # main view
            @view = new com.gen.views.View
                title: @get 'title'
                className: 'block'
                model: model
                template: displayTemplate

            # do render task
            @render()
            return

        getCollection: ->
            collection = new com.gen.models.Collection()
            # url where to request list
            collection.url = '/rest/hello/person/list'
            collection

        getItemModel: (attributes)->
            model = new Backbone.Model attributes
            # url where to create, read, update and delete a model
            model.urlRoot = '/rest/hello/person/edit'
            model

        getForm: (attributes = {}, model, params)->
            FormGenerator.generateEditForm
                lastname:
                    type: 'Text'
                    attributes: disabled: !!attributes.id
                    options: label: 'tutorial.user.lastname'

                firstname:
                    type: 'Text'
                    attributes: disabled: !!attributes.id
                    options: label: 'tutorial.user.firstname'

                occupation:
                    type: 'Text'
                    options:
                        label: 'tutorial.user.occupation'
                        validation: [validators.maxLength(20)]

                country:
                    type: 'Text'
                    options:
                        label: 'tutorial.user.country'
                        validation: [validators.maxLength(20)]

        listAction: ->
            @listRender
                className: 'block'
                template: listTemplate
                container: '.users'
                itemTemplate: listItemTemplate
            return

        editAction: ->
            @editRender className: 'generic-form form-horizontal block'
            return
